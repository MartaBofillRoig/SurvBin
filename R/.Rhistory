print(j)
}
cov(ub,us)
summary(xcov)
plot(density((zb+zs)/sqrt(2+2*xcov/(ub_sd*us_sd)), na.rm = T),ylim=c(0,0.5), lwd = 2)
lines(density((zb+zs)/sqrt(2+2*cov(ub,us)/(ub_sd*us_sd)), na.rm = T),col=3)
lines(density(ub/ub_sd), col=4)
lines(density(us/us_sd), col=4)
x=rnorm(n=10000)
lines(density(x), col=2)
sum(alpha_est)/nsim
t1=Sys.time()-t0
(t1)
sum((zb + zs )/sqrt(2 + 2*cov(ub,us)/(ub_sd*us_sd))> z.alpha)/nsim
cov(ub,us)-mean(xcov)
cov(zb,zs)-mean(xcov/(ub_sd*us_sd))
summary(data[data$Test_Reject>0])
summary(data[data$Test_Reject>0,])
summary(subset(data,data$Test_Reject>0,data$eta=0))
summary(subset(data,data$Test_Reject>0 & data$eta=0))
summary(subset(data,data$Test_Reject>0 & data$eta==0))
summary(subset(data,data$Test_Reject>0 & data$eta==1))
##############################################
# Functions for the binary and survival setting; for the covariance computation; and for simulating the binary and time-to-event data
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/binary-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/survival-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/cov-functions-completekernel-dec2.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/simulation-functions3.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/lstats-function2.R')
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
# Working directory
setwd("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations")
#####################################################################################
# PREAMBLE
#####################################################################################
library(copula)
library(pracma) # for using the function 'integral'
library(survival)
require(zoo) # 'rollmean' function
require(muhaz)
# Parameters
alpha=0.05;
z.alpha <- qnorm(1-alpha,0,1)
# nsim: number of simulations
nsim=500
# alpha=0.05
# sd=sqrt(alpha*(1-alpha)/nsim)
# c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03396795 0.06603205
# simulation seed
set.seed(3012)
t0=Sys.time()
data$Test_Reject=0
# Functions for the binary and survival setting; for the covariance computation; and for simulating the binary and time-to-event data
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/binary-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/survival-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/cov-functions-completekernel-dec2.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/simulation-functions3.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/lstats-function2.R')
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
# Working directory
setwd("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations")
#####################################################################################
# PREAMBLE
#####################################################################################
library(copula)
library(pracma) # for using the function 'integral'
library(survival)
require(zoo) # 'rollmean' function
require(muhaz)
# Parameters
alpha=0.05;
z.alpha <- qnorm(1-alpha,0,1)
# nsim: number of simulations
nsim=500
# alpha=0.05
# sd=sqrt(alpha*(1-alpha)/nsim)
# c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03396795 0.06603205
# simulation seed
set.seed(3012)
t0=Sys.time()
data$Test_Reject=0
# for(i in 1:5){ # just for testing
for(i in 1:dim(data)[1]){
data$Test_Reject[i] <- sum(replicate(nsim,
fCS.TEST(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
prob0=data$p0[i],
ass.par=data$theta[i],
ss=data$n[i],
censoring="Unif",
tau=data$tau[i], taub=data$taub[i], rho=data$rho[i], gam=data$gamma[i], eta=data$eta[i],
w1=data$omegab[i], w2=data$omegas[i])) > z.alpha,na.rm = T)/nsim
t1=Sys.time()-t0
cat(i, "\t", data$Test_Reject[i], "\t", t1, "\n", file="LOG1.txt", append=TRUE)
save.image("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/RESULTS2_Scenarios_H0_True.RData")
}
# Functions for the binary and survival setting; for the covariance computation; and for simulating the binary and time-to-event data
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/binary-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/survival-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/cov-functions-completekernel-dec2.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/simulation-functions3.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/lstats-function2.R')
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
# Working directory
setwd("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations")
#####################################################################################
# PREAMBLE
#####################################################################################
library(copula)
library(pracma) # for using the function 'integral'
library(survival)
require(zoo) # 'rollmean' function
require(muhaz)
# Parameters
alpha=0.05;
z.alpha <- qnorm(1-alpha,0,1)
# nsim: number of simulations
nsim=500
# alpha=0.05
# sd=sqrt(alpha*(1-alpha)/nsim)
# c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03396795 0.06603205
# simulation seed
set.seed(3112)
t0=Sys.time()
data$Test_Reject=0
# for(i in 1:5){ # just for testing
for(i in 1:dim(data)[1]){
data$Test_Reject[i] <- sum(replicate(nsim,
fCS.TEST(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
prob0=data$p0[i],
ass.par=data$theta[i],
ss=data$n[i],
censoring="Unif",
tau=data$tau[i], taub=data$taub[i], rho=data$rho[i], gam=data$gamma[i], eta=data$eta[i],
w1=data$omegab[i], w2=data$omegas[i])) > z.alpha,na.rm = T)/nsim
t1=Sys.time()-t0
cat(i, "\t", data$Test_Reject[i], "\t", t1, "\n", file="LOG1.txt", append=TRUE)
save.image("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/RESULTS2_Scenarios_H0_True.RData")
}
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database_Scenarios_H0_True.RData")
View(data)
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data[data$b==1]
data[data$b==1,]
View(data)
data=data[data$b==2,]
data[data$taub==0,]
View(data)
data=data[data$taub>0,]
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data2=data[data$b==2,]
data2=data[data$taub>0,]
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data1=data
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data2=data[data$b==2,]
data2=data[data$taub>0,]
data = rbind(data1,data2)
252+168
summary(data)
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/binary-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/survival-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/cov-functions-completekernel-dec2.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/simulation-functions3.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/lstats-function2.R')
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data1=data
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data2=data[data$b==2,]
data2=data[data$taub>0,]
data = rbind(data1,data2)
rm(data1,data2)
View(survbinCov_kernel)
# Functions for the binary and survival setting; for the covariance computation; and for simulating the binary and time-to-event data
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/binary-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/survival-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/cov-functions-completekernel-dec2.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/simulation-functions3.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/lstats-function2.R')
View(simsurvbin)
View(lstats)
# Functions for the binary and survival setting; for the covariance computation; and for simulating the binary and time-to-event data
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/binary-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/survival-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/cov-functions-completekernel-dec2.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/simulation-functions3.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/lstats-function2.R')
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data1=data
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data2=data[data$b==2,]
data2=data[data$taub>0,]
data = rbind(data1,data2)
rm(data1,data2)
# Working directory
setwd("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations")
#####################################################################################
# PREAMBLE
#####################################################################################
library(copula)
library(pracma) # for using the function 'integral'
library(survival)
require(zoo) # 'rollmean' function
require(muhaz)
# Parameters
alpha=0.05;
z.alpha <- qnorm(1-alpha,0,1)
# nsim: number of simulations
nsim=500
# alpha=0.05
# sd=sqrt(alpha*(1-alpha)/nsim)
# c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03396795 0.06603205
# simulation seed
set.seed(3112)
t0=Sys.time()
data$Test_Reject=0
# for(i in 1:5){ # just for testing
for(i in 1:dim(data)[1]){
data$Test_Reject[i] <- sum(replicate(nsim,
fCS.TEST(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
prob0=data$p0[i],
ass.par=data$theta[i],
ss=data$n[i],
censoring="Unif",
tau=data$tau[i], taub=data$taub[i], rho=data$rho[i], gam=data$gamma[i], eta=data$eta[i],
w1=data$omegab[i], w2=data$omegas[i])) > z.alpha,na.rm = T)/nsim
t1=Sys.time()-t0
cat(i, "\t", data$Test_Reject[i], "\t", t1, "\n", file="LOG_EA.txt", append=TRUE)
save.image("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/RESULTS_EA_Scenarios_H0_True.RData")
}
View(data)
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data1=data
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data2=data[data$b==2,]
data2=data2[data2$taub>0,]
data = rbind(data1,data2)
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data2=data[data$b==2,]
data2=data2[data2$taub>0,]
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data2=data[data$b==2,]
data2[data2$taub>0,]
# Functions for the binary and survival setting; for the covariance computation; and for simulating the binary and time-to-event data
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/binary-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/survival-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/cov-functions-completekernel-dec2.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/simulation-functions3.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/lstats-function2.R')
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data1=data
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data2=data[data$b==2,]
data2=data2[data2$taub>0,]
data = rbind(data1,data2)
rm(data1,data2)
# Working directory
setwd("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations")
#####################################################################################
# PREAMBLE
#####################################################################################
library(copula)
library(pracma) # for using the function 'integral'
library(survival)
require(zoo) # 'rollmean' function
require(muhaz)
# Parameters
alpha=0.05;
z.alpha <- qnorm(1-alpha,0,1)
# nsim: number of simulations
nsim=500
# alpha=0.05
# sd=sqrt(alpha*(1-alpha)/nsim)
# c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03396795 0.06603205
# simulation seed
set.seed(3112)
t0=Sys.time()
data$Test_Reject=0
# for(i in 1:5){ # just for testing
for(i in 1:dim(data)[1]){
data$Test_Reject[i] <- sum(replicate(nsim,
fCS.TEST(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
prob0=data$p0[i],
ass.par=data$theta[i],
ss=data$n[i],
censoring="Unif",
tau=data$tau[i], taub=data$taub[i], rho=data$rho[i], gam=data$gamma[i], eta=data$eta[i],
w1=data$omegab[i], w2=data$omegas[i])) > z.alpha,na.rm = T)/nsim
t1=Sys.time()-t0
cat(i, "\t", data$Test_Reject[i], "\t", t1, "\n", file="LOG_EA.txt", append=TRUE)
save.image("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/RESULTS_EA_Scenarios_H0_True.RData")
}
# Functions for the binary and survival setting; for the covariance computation; and for simulating the binary and time-to-event data
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/binary-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/survival-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/cov-functions-completekernel-dec2.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/simulation-functions3.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/lstats-function2.R')
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data1=data
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data2=data[data$b==2,]
data2=data2[data2$taub>0,]
data = rbind(data1,data2)
rm(data1,data2)
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data1=data
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data2=data[data$b==2,]
data2=data2[data2$taub>0,]
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data1=data
View(data)
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database_Scenarios_H0_True.RData")
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database_Scenarios_H0_True.RData")
View(data)
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database_Scenarios_H0_True.RData")
data1=data
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data2=data[data$b==2,]
data2=data2[data2$taub>0,]
data = rbind(data1,data2)
rm(data1,data2)
View(data)
# Functions for the binary and survival setting; for the covariance computation; and for simulating the binary and time-to-event data
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/binary-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/survival-functions.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/cov-functions-completekernel-dec2.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/simulation-functions3.R')
source('C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/lstats-function2.R')
# Scenarios
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database_Scenarios_H0_True.RData")
data1=data
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/database2_Scenarios_H0_True.RData")
data2=data[data$b==2,]
data2=data2[data2$taub>0,]
data = rbind(data1,data2)
rm(data1,data2)
setwd("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations")
#####################################################################################
# PREAMBLE
#####################################################################################
library(copula)
library(pracma) # for using the function 'integral'
library(survival)
require(zoo) # 'rollmean' function
require(muhaz)
# Parameters
alpha=0.05;
z.alpha <- qnorm(1-alpha,0,1)
# nsim: number of simulations
nsim=500
# alpha=0.05
# sd=sqrt(alpha*(1-alpha)/nsim)
# c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03396795 0.06603205
# simulation seed
set.seed(3112)
t0=Sys.time()
data$Test_Reject=0
# for(i in 1:5){ # just for testing
for(i in 1:dim(data)[1]){
data$Test_Reject[i] <- sum(replicate(nsim,
fCS.TEST(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
prob0=data$p0[i],
ass.par=data$theta[i],
ss=data$n[i],
censoring="Unif",
tau=data$tau[i], taub=data$taub[i], rho=data$rho[i], gam=data$gamma[i], eta=data$eta[i],
w1=data$omegab[i], w2=data$omegas[i])) > z.alpha,na.rm = T)/nsim
t1=Sys.time()-t0
cat(i, "\t", data$Test_Reject[i], "\t", t1, "\n", file="LOG_EA.txt", append=TRUE)
save.image("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/RESULTS_EA_Scenarios_H0_True.RData")
}
t1=Sys.time()-t0
cat(t1, "\n", file="LOG_EA.txt", append=TRUE)
(t1)
rm(i)
save.image("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/RESULTS_EA_Scenarios_H0_True.RData")
summary(data)
summary(data[data$eta==1])
summary(data[data$eta==1,])
summary(data[data$eta==0,])
data$weights=data$eta+data$rho+data$gamma
summary(subset(data,data$eta==0))
summary(subset(data,data$eta==1))
summary(subset(data,data$eta==0 & data$weights==2))
summary(subset(data,data$eta==1 & data$weights==2))
summary(subset(data,data$theta==0.001))
summary(subset(data,data$theta==2))
summary(subset(data,data$theta==5))
summary(subset(data,data$theta==2))
summary(subset(data,data$theta==5))
summary(subset(data,data$taub==0.5))
summary(subset(data,data$taub==1))
summary(subset(data,data$taub==0.5 & data$theta==0.001))
summary(subset(data,data$taub==0.5 & data$theta==0.001))
summary(subset(data,data$taub==0.5 & data$theta==2))
summary(subset(data,data$taub==0.5 & data$theta==5))
summary(subset(data,data$taub==0.5 & data$theta==0.001))
summary(subset(data,data$taub==0.5 & data$theta==2))
summary(subset(data,data$taub==0.5 & data$theta==5))
summary(subset(data,data$taub==1 & data$theta==0.001))
summary(subset(data,data$taub==1 & data$theta==2))
summary(subset(data,data$taub==1 & data$theta==5))
#####################################################################################
# Summary according to weights
subdata_eta =
summary(subset(data,data$eta==0))
#####################################################################################
# Summary according to weights
subdata_eta =
summary(subset(data,data$eta==0))
#####################################################################################
# Summary according to weights
subdata_eta =
summary(subset(data,data$eta==0))
#####################################################################################
# Summary according to weights
subdata_eta =
summary(subset(data,data$eta==0))
#####################################################################################
# Summary according to weights
subdata_eta = subset(data,data$eta==1)
summary(subset(data,data$eta==0))
summary(subset(data,data$eta==1))
summary(subset(data,data$eta==1 & data$weights==3))
summary(subset(data,data$eta==1 & data$weights==2))
summary(subset(data,data$eta==1 & data$weights==3))
#####################################################################################
# Summary according to weights
subdata_eta = subset(data,data$eta==1)
summary(subset(subdata_eta,subdata_eta$taub==0.5 & subdata_eta$theta==0.001))
summary(subset(subdata_eta,subdata_eta$taub==0.5 & subdata_eta$theta==2))
summary(subset(subdata_eta,subdata_eta$taub==0.5 & subdata_eta$theta==0.001))
summary(subset(subdata_eta,subdata_eta$taub==0.5 & subdata_eta$theta==2))
summary(subset(subdata_eta,subdata_eta$taub==0.5 & subdata_eta$theta==5))
summary(subset(data,data$taub==0.5 & data$theta==0.001))
summary(subset(data,data$taub==0.5 & data$theta==0.001))
summary(subset(data,data$taub==0.5 & data$theta==2))
summary(subset(data,data$taub==0.5 & data$theta==5))
summary(subset(subdata_eta,subdata_eta$taub==0.5 & subdata_eta$theta==0.001))
summary(subset(subdata_eta,subdata_eta$taub==0.5 & subdata_eta$theta==2))
summary(subset(subdata_eta,subdata_eta$taub==0.5 & subdata_eta$theta==5))
summary(subset(subdata_eta,subdata_eta$taub==1 & subdata_eta$theta==0.001))
summary(subset(subdata_eta,subdata_eta$taub==1 & subdata_eta$theta==2))
summary(subset(subdata_eta,subdata_eta$taub==1 & subdata_eta$theta==5))
summary(subset(data,data$taub==1 & data$theta==0.001))
summary(subset(data,data$taub==1 & data$theta==2))
summary(subset(data,data$taub==1 & data$theta==5))
summary(subset(subdata_eta,subdata_eta$taub==1 & subdata_eta$theta==5))
windows(width = 16, height = 24)
par(mfrow = c(4, 3)) #,pty = "s")
plot(data$theta,data$Test_Reject, ylab="Test_Reject", xlab="theta");
plot(data$n,data$Test_Reject, ylab="Test_Reject", xlab="n");
plot(data$p0,data$Test_Reject, ylab="Test_Reject", xlab="p0");
plot(data$a,data$Test_Reject, ylab="Test_Reject", xlab="a");
plot(data$b,data$Test_Reject, ylab="Test_Reject", xlab="b");
plot(data$r,data$Test_Reject, ylab="Test_Reject", xlab="r");
plot(data$rho,data$Test_Reject, ylab="Test_Reject", xlab="rho");
plot(data$gamma,data$Test_Reject, ylab="Test_Reject", xlab="gamma");
plot(data$eta,data$Test_Reject, ylab="Test_Reject", xlab="eta");
plot(data$tau,data$Test_Reject, ylab="Test_Reject", xlab="tau");
plot(data$taub,data$Test_Reject, ylab="Test_Reject", xlab="taub");
plot(data$r,data$Test_Reject, ylab="Test_Reject", xlab="r")
load("C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/RESULTS_EA_Scenarios_H0_True.RData")
#####################################################################################
# RESULTS
#####################################################################################
load("C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/RESULTS_EA_Scenarios_H0_True.RData")
summary(subset(data,data$b==2))
summary(subset(data,data$b==1))
summary(subset(data,data$a==0.5))
summary(subset(data,data$a==1))
summary(subset(data,data$a==0.5))
summary(subset(data,data$a==1))
summary(subset(data,data$a==2))
summary(subset(data,data$b==1))
summary(subset(data,data$b==2))
summary(subset(data,data$a==0.5))
summary(subset(data,data$a==1))
summary(subset(data,data$a==2))
summary(data)
plot(data$Test_Reject)
plot(data$Test_Reject)
s
#####################################################################################
# RESULTS
#####################################################################################
load("C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/RESULTS_EA_Scenarios_H0_True.RData")
plot(data$Test_Reject)
setwd("C:/Users/Marta.Bofill/Dropbox/C5/Scripts/GitKraken/survivalbinary/R")
