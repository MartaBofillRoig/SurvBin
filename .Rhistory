qnorm(0.05)
qnorm(0.00001)
qnorm(0.01)
qnorm(0.025)
qnorm(0.95)*100/sqrt(1000)
qnorm(0.925)*100/sqrt(1000)
qnorm(0.925)*100/sqrt(16)
qnorm(0.95)*100/sqrt(16)
qnorm(0.95)*100/sqrt(17)
qnorm(0.95)*100/sqrt(15)
qnorm(0.95)*100/sqrt(17)
qnorm(0.95)*100/sqrt(12)
qnorm(0.95)*100/sqrt(10)
1000-qnorm(0.95)*100/sqrt(16)
1000qnorm(0.95)*100/sqrt(16)
qnorm(0.95)*100/sqrt(16)
qnorm(0.95)*100/sqrt(11)
qnorm(0.925)*100/sqrt(11)
qnorm(0.925)*100/sqrt(7)
qnorm(0.925)*100/sqrt(11)
qnorm(0.95)*100/sqrt(11)
q(0.95)*100/sqrt(16)
qt(0.95)*100/sqrt(16)
qt(0.95,1)*100/sqrt(16)
qnorm(0.025)*100/sqrt(16)
qnorm(0.05)
1.64/sqrt(2)
sqrt(2)
1.64/sqrt(4)
qnorm(0.025)
1.95/sqrt82
1.95/sqrt(2)
1.64sqrt(2)
1.64*sqrt(2)
328+65+254+173
328+65+254+173
328+65+254+173
122+22+108+90
342/50
820/50
library(Rcmdr)
effectsTheme()
library(Rcmdr)
library(Rcmdr)
library(Rcmdr)
25/(25+124)
library(Rcmdr)
98/5
pi
# Table A1 conditional transformation for copula FRANK
cop2 <- function(v1,v2,theta){
u2 = -(1/theta)*log(1+(v2*(1-exp(-theta)))/(v2*(exp(-theta*v1)-1)-exp(-theta*v1)))
}
##################################################################################
fCS <- function(a.shape, b.scale, followup, rate.param, prob0,
# cop,
ass.par, ss){
######################################
# RE-PARAMETRIZATION for time-to-event simulation
lambda=(1/b.scale)^a.shape
rho=a.shape
# TREATMENT GROUP
######################################
v1 <- runif(n=ss)
v2 <- runif(n=ss)
u1 <- v1
u2 <- cop2(v1,v2,ass.par)
v = cbind(u1,u2)
# time-to-binaryevent
rate.bin= -log(1-prob0)
# TE.BE1 = -log(v[,1])*rate.bin
TE.BE1 = -(log(1-v[,2]))/rate.bin
BE1 = ifelse(TE.BE1<1, 1, 0)
# time-to-event (survival)
# TE1 = (-log(1-v[,1])/(lambda))^(1/rho) # version reducedResults_ConditionalSampling
TE1 = b.scale*(-log(1-v[,1]))^(1/a.shape)
TC1 = rexp(n= ss, rate = rate.param)
time1= ifelse(TE1<=TC1, TE1,TC1)
status1 = ifelse(TE1<=TC1 & TE1<followup,1,0)
treat1 = rep(1,ss)
# CONTROL GROUP
######################################
v1 <- runif(n=ss)
v2 <- runif(n=ss)
u1 <- v1
u2 <- cop2(v1,v2,ass.par)
v = cbind(u1,u2)
# time-to-binaryevent
rate.bin= -log(1-prob0)
# TE.BE0 = -log(v[,1])*rate.bin
TE.BE0 = -(log(1-v[,2]))/rate.bin
BE0 = ifelse(TE.BE0<1, 1, 0)
# time-to-event (survival)
# TE0 = (-log(1-v[,1])/(lambda))^(1/rho)
TE0 = b.scale*(-log(1-v[,1]))^(1/a.shape)
TC0 = rexp(n=ss, rate = rate.param)
time0= ifelse(TE0<=TC0, TE0,TC0)
status0 = ifelse(TE0<=TC0 & TE0<followup,1,0)
treat0 = rep(0,ss)
# TWO-SAMPLE db
######################################
treat0=as.vector(treat0)
treat1=as.vector(treat1)
db = data.frame(binary=c(BE1, BE0), time=c(time1,time0), status=c(status1,status0),treat=c(treat1,treat0))
return(db)
}
44.58+48.85+37.45+1108.8
1239.68/3
(31-13)+10
28*45
(31-8)+13
36*45
(31-7)+13
34*45
knitr::opts_chunk$set(
collapse = T,
comment = "#>"
)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions")
source('simulation-functions.R')
source('binary-functions.R')
source('survival-functions.R')
source("C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/cov-functions-completekernel.R")
source("C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Functions/cov-functions-complete.R")
library(survival)
library(zoo)
library(muhaz)
library(copula)
alpha=0.025;
z.alpha <- qnorm(1-alpha,0,1)
nsim=1000
sd=sqrt(alpha*(1-alpha)/nsim)
c(alpha-z.alpha*sd,alpha+z.alpha*sd)
p=0.1
set.seed(43321)
nsim=100
rho(frankCopula(param=1,dim=2))
rho(frankCopula(param=2,dim=2))
rho(frankCopula(param=5,dim=2))
rho(frankCopula(param=10,dim=2))
a.shape=1.5 # shape parameter weibull distr
b.scale=2 # scale parameter weibull distr
rate.param=0.5 # rate parameter exp distribution (censoring distribution)
prob0=0.4 # probability binary outcome
ass.par=c(2,5) # association parameter copula
ss=500 # sample size per arm
tau0=0
tau=3 # end of follow-up survival
taub=c(1,3) # follow-up binary outcome
rho=0 # parameters for the weights, see details in lstats() function
gam=0 # parameters for the weights, see details in lstats() function
ome=1 # parameters for the weights, see details in lstats() function
t0=Sys.time()
set.seed(9110)
zb_cs1 <- c()
ub <- c()
ub_sd <- c()
zs_cs1 <- c()
us <- c()
us_sd <- c()
xcov <- c()
zsb_cs1 <- c()
for(i in 1:nsim){
data=fCS(a.shape=a.shape, b.scale=b.scale, rate.param=rate.param, prob0=prob0,
ass.par=2, #ass.par=ass.par[1],
ss=ss)
aux <- bintest(data$binary, data$treat)
zb_cs1[i] <- aux[1]
ub[i] <- aux[2]
ub_sd[i] <- aux[3]
aux <- survtest(data$time, data$status, data$treat, tau=tau, rho=rho, gam=gam, ome=ome)
zs_cs1[i] <- aux[1]
us[i] <- aux[2]
us_sd[i] <- aux[3]
xcov[i] <- survbinCov(data$time, data$status, data$binary, data$treat, tau0=0, tau=tau,
taub= 1, #taub=taub[1],
rho=rho, gam=gam, ome=ome)
zsb_cs1[i] <- (zb_cs1[i]+zs_cs1[i])/sqrt(2+2*xcov[i]/(ub_sd[i]*us_sd[i]))
}
zb_cs2 <- c()
ub <- c()
ub_sd <- c()
zs_cs2 <- c()
us <- c()
us_sd <- c()
xcov <- c()
zsb_cs2 <- c()
for(i in 1:nsim){
data=fCS(a.shape=a.shape, b.scale=b.scale, rate.param=rate.param, prob0=prob0,
ass.par=5, #ass.par=ass.par[1],
ss=ss)
aux <- bintest(data$binary, data$treat)
zb_cs2[i] <- aux[1]
ub[i] <- aux[2]
ub_sd[i] <- aux[3]
aux <- survtest(data$time, data$status, data$treat, tau=tau, rho=rho, gam=gam, ome=ome)
zs_cs2[i] <- aux[1]
us[i] <- aux[2]
us_sd[i] <- aux[3]
xcov[i] <- survbinCov(data$time, data$status, data$binary, data$treat, tau0=0, tau=tau,
taub=1,#taub=taub[1],
rho=rho, gam=gam, ome=ome)
zsb_cs2[i] <- (zb_cs2[i]+zsb_cs2[i])/sqrt(2+2*xcov[i]/(ub_sd[i]*us_sd[i]))
}
zb_cs3 <- c()
ub <- c()
ub_sd <- c()
zs_cs3 <- c()
us <- c()
us_sd <- c()
xcov <- c()
zsb_cs3 <- c()
for(i in 1:nsim){
data=fCS(a.shape=a.shape, b.scale=b.scale, rate.param=rate.param, prob0=prob0,
ass.par=2, #ass.par=ass.par[1],
ss=ss)
aux <- bintest(data$binary, data$treat)
zb_cs3[i] <- aux[1]
ub[i] <- aux[2]
ub_sd[i] <- aux[3]
aux <- survtest(data$time, data$status, data$treat, tau=tau, rho=rho, gam=gam, ome=ome)
zs_cs3[i] <- aux[1]
us[i] <- aux[2]
us_sd[i] <- aux[3]
xcov[i] <- survbinCov(data$time, data$status, data$binary, data$treat, tau0=0, tau=tau,
taub=3, #taub=taub[2],
rho=rho, gam=gam, ome=ome)
zsb_cs3[i] <- (zb_cs3[i]+zs_cs3[i])/sqrt(2+2*xcov[i]/(ub_sd[i]*us_sd[i]))
}
summary(zsb_cs2)
summary(zsb_cs1)
zb_cs2k <- c()
ub <- c()
ub_sd <- c()
zs_cs2k <- c()
us <- c()
us_sd <- c()
xcov_kernel <- c()
zsb_cs2k <- c()
for(i in 1:nsim){
data=fCS(a.shape=a.shape, b.scale=b.scale, rate.param=rate.param, prob0=prob0,
ass.par=5, #ass.par=ass.par[1],
ss=ss)
aux <- bintest(data$binary, data$treat)
zb_cs2k[i] <- aux[1]
ub[i] <- aux[2]
ub_sd[i] <- aux[3]
aux <- survtest(data$time, data$status, data$treat, tau=tau, rho=rho, gam=gam, ome=ome)
zs_cs2k[i] <- aux[1]
us[i] <- aux[2]
us_sd[i] <- aux[3]
xcov_kernel[i] <- survbinCov_kernel(data$time, data$status, data$binary, data$treat, tau0=0, tau=tau,
taub=1,#taub=taub[1],
rho=rho, gam=gam, ome=ome)
zsb_cs2k[i] <- (zb_cs2k[i]+zs_cs2k[i])/sqrt(2+2*xcov_kernel[i]/(ub_sd[i]*us_sd[i]))
}
zb_cs1 <- c()
ub <- c()
ub_sd <- c()
zs_cs1 <- c()
us <- c()
us_sd <- c()
xcov <- c()
zsb_cs1 <- c()
for(i in 1:nsim){
data=fCS(a.shape=a.shape, b.scale=b.scale, rate.param=rate.param, prob0=prob0,
ass.par=2, #ass.par=ass.par[1],
ss=ss)
aux <- bintest(data$binary, data$treat)
zb_cs1[i] <- aux[1]
ub[i] <- aux[2]
ub_sd[i] <- aux[3]
aux <- survtest(data$time, data$status, data$treat, tau=tau, rho=rho, gam=gam, ome=ome)
zs_cs1[i] <- aux[1]
us[i] <- aux[2]
us_sd[i] <- aux[3]
xcov[i] <- survbinCov(data$time, data$status, data$binary, data$treat, tau0=0, tau=tau,
taub= 1, #taub=taub[1],
rho=rho, gam=gam, ome=ome)
zsb_cs1[i] <- (zb_cs1[i]+zs_cs1[i])/sqrt(2+2*xcov[i]/(ub_sd[i]*us_sd[i]))
}
summary(zsb_cs1)
zb_cs2 <- c()
ub <- c()
ub_sd <- c()
zs_cs2 <- c()
us <- c()
us_sd <- c()
xcov <- c()
zsb_cs2 <- c()
for(i in 1:nsim){
data=fCS(a.shape=a.shape, b.scale=b.scale, rate.param=rate.param, prob0=prob0,
ass.par=5, #ass.par=ass.par[1],
ss=ss)
aux <- bintest(data$binary, data$treat)
zb_cs2[i] <- aux[1]
ub[i] <- aux[2]
ub_sd[i] <- aux[3]
aux <- survtest(data$time, data$status, data$treat, tau=tau, rho=rho, gam=gam, ome=ome)
zs_cs2[i] <- aux[1]
us[i] <- aux[2]
us_sd[i] <- aux[3]
xcov[i] <- survbinCov(data$time, data$status, data$binary, data$treat, tau0=0, tau=tau,
taub=1,#taub=taub[1],
rho=rho, gam=gam, ome=ome)
zsb_cs2[i] <- (zb_cs2[i]+zsb_cs2[i])/sqrt(2+2*xcov[i]/(ub_sd[i]*us_sd[i]))
}
summary(zsb_cs2)
i=1
data=fCS(a.shape=a.shape, b.scale=b.scale, rate.param=rate.param, prob0=prob0,
ass.par=5, #ass.par=ass.par[1],
ss=ss)
aux <- bintest(data$binary, data$treat)
zb_cs2[i] <- aux[1]
ub[i] <- aux[2]
ub_sd[i] <- aux[3]
aux <- survtest(data$time, data$status, data$treat, tau=tau, rho=rho, gam=gam, ome=ome)
zs_cs2[i] <- aux[1]
us[i] <- aux[2]
us_sd[i] <- aux[3]
xcov[i] <- survbinCov(data$time, data$status, data$binary, data$treat, tau0=0, tau=tau,
taub=1,#taub=taub[1],
rho=rho, gam=gam, ome=ome)
zsb_cs2[i] <- (zb_cs2[i]+zsb_cs2[i])/sqrt(2+2*xcov[i]/(ub_sd[i]*us_sd[i]))
zsb_cs2[i]
zb_cs2
zb_cs2[i]+zsb_cs2[i]
aux
aux
aux <- bintest(data$binary, data$treat)
aux
aux <- survtest(data$time, data$status, data$treat, tau=tau, rho=rho, gam=gam, ome=ome)
aux
zs_cs2[i] <- aux[1]
us[i] <- aux[2]
us_sd[i] <- aux[3]
xcov[i] <- survbinCov(data$time, data$status, data$binary, data$treat, tau0=0, tau=tau,
taub=1,#taub=taub[1],
rho=rho, gam=gam, ome=ome)
(zb_cs2[i]+zsb_cs2[i])
zb_cs2[i]
zsb_cs2[i]
zb_cs3 <- c()
ub <- c()
ub_sd <- c()
zs_cs3 <- c()
us <- c()
us_sd <- c()
xcov <- c()
zsb_cs3 <- c()
for(i in 1:nsim){
data=fCS(a.shape=a.shape, b.scale=b.scale, rate.param=rate.param, prob0=prob0,
ass.par=2, #ass.par=ass.par[1],
ss=ss)
aux <- bintest(data$binary, data$treat)
zb_cs3[i] <- aux[1]
ub[i] <- aux[2]
ub_sd[i] <- aux[3]
aux <- survtest(data$time, data$status, data$treat, tau=tau, rho=rho, gam=gam, ome=ome)
zs_cs3[i] <- aux[1]
us[i] <- aux[2]
us_sd[i] <- aux[3]
xcov[i] <- survbinCov(data$time, data$status, data$binary, data$treat, tau0=0, tau=tau,
taub=3, #taub=taub[2],
rho=rho, gam=gam, ome=ome)
zsb_cs3[i] <- (zb_cs3[i]+zs_cs3[i])/sqrt(2+2*xcov[i]/(ub_sd[i]*us_sd[i]))
}
zb_cs2k <- c()
ub <- c()
ub_sd <- c()
zs_cs2k <- c()
us <- c()
us_sd <- c()
xcov_kernel <- c()
zsb_cs2k <- c()
for(i in 1:nsim){
data=fCS(a.shape=a.shape, b.scale=b.scale, rate.param=rate.param, prob0=prob0,
ass.par=5, #ass.par=ass.par[1],
ss=ss)
aux <- bintest(data$binary, data$treat)
zb_cs2k[i] <- aux[1]
ub[i] <- aux[2]
ub_sd[i] <- aux[3]
aux <- survtest(data$time, data$status, data$treat, tau=tau, rho=rho, gam=gam, ome=ome)
zs_cs2k[i] <- aux[1]
us[i] <- aux[2]
us_sd[i] <- aux[3]
xcov_kernel[i] <- survbinCov_kernel(data$time, data$status, data$binary, data$treat, tau0=0, tau=tau,
taub=1,#taub=taub[1],
rho=rho, gam=gam, ome=ome)
zsb_cs2k[i] <- (zb_cs2k[i]+zs_cs2k[i])/sqrt(2+2*xcov_kernel[i]/(ub_sd[i]*us_sd[i]))
}
plot(density(dweibull(x, shape=5,scale=1)))
plot()
plot(NA)
lines(density(dweibull(x, shape=5,scale=1)))
install.packages("boot ")
library(boot)
install.packages("Countr")
library(Countr)
0.2*1000
usethis::create_package("~/Desktop/GRBIOseminar")
usethis::create_package("~/Desktop/SurvBin")
devtools::document()
load("C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/Results-dec-2019/RESULTSdatabase_Scenarios_H0_True.RData")
View(data)
summary(data[1:16,])
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Simulations/RESULTSdatabase_Scenarios_H0_True.RData")
setwd("C:/Users/Marta.Bofill/Dropbox/C5/Scripts/GitKraken/survivalbinary")
devtools::document()
devtools::load_all()
survtest()
survtest
library(SurvBin)
help(lstats)
devtools::document()
