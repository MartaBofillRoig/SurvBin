alpha=0.05
nsim=1000
sd=sqrt(alpha*(1-alpha)/nsim)
c(alpha-z.alpha*sd,alpha+z.alpha*sd)
z.alpha <- qnorm(1-alpha,0,1)
c(alpha-z.alpha*sd,alpha+z.alpha*sd)
alpha=0.05
nsim=1000
sd=sqrt(alpha*(1-alpha)/nsim)
z.alpha <- qnorm(1-alpha,0,1)
c(alpha-z.alpha*sd,alpha+z.alpha*sd)
nsim=500
sd=sqrt(alpha*(1-alpha)/nsim)
z.alpha <- qnorm(1-alpha,0,1)
c(alpha-z.alpha*sd,alpha+z.alpha*sd)
nsim=500
sd=sqrt(alpha*(1-alpha)/nsim)
z.alpha <- qnorm(1-alpha,0,1)
c(alpha-z.alpha*sd,alpha+z.alpha*sd)
nsim=1000
sd=sqrt(alpha*(1-alpha)/nsim)
z.alpha <- qnorm(1-alpha,0,1)
c(alpha-z.alpha*sd,alpha+z.alpha*sd)
nsim=2500
sd=sqrt(alpha*(1-alpha)/nsim)
z.alpha <- qnorm(1-alpha,0,1)
c(alpha-z.alpha*sd,alpha+z.alpha*sd)
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_ExtendedAbstract/Simulations/Results/RESULTS_EA.RData")
View(data)
View(data)
t1
summary(data[1:164],)
summary(data[1:164,])
164/9.33
(164/9.33)*60
(9.33/164)
(9.33/164)*60
(504-164)*3.42
(504-164)*3.42/60
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_ExtendedAbstract/Simulations/Results/RESULTS_EA.RData")
summary(data[data$Test_Reject_Pooled>0,])
summary(data[data$Test_Reject_Pooled>0 & data$theta==5,])
summary(data[data$Test_Reject_Pooled>0 & data$theta==2,])
summary(data[data$Test_Reject_Pooled>0 & data$theta==0.001,])
summary(data[data$Test_Reject_Pooled>0 & data$taub==0.5,])
summary(data[data$Test_Reject_Pooled>0 & data$taub==1,])
load("C:/Users/marta.bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Simulations/Results/RESULTS_PAPER.RData")
summary(data[data$Test_Reject_Pooled>0,])
summary(data[data$Test_Reject_Pooled>0 & data$theta==0.001,])
summary(data[data$Test_Reject_Pooled>0 & data$theta==2,])
summary(data[data$Test_Reject_Pooled>0 & data$theta==5,])
summary(data[data$Test_Reject_Pooled>0 & data$taub==1,])
summary(data[data$Test_Reject_Pooled>0 & data$taub==0.5,])
################################################################
# SIMULATIONS Statistics Binary and Survival outcomes
# Simulating bivariate binary and survival data
# Last update 2019-01-07 (Eivissa);
# Marta Bofill and Guadalupe Gómez
################################################################
# Functions for the binary and survival setting; for the covariance computation; and for simulating the binary and time-to-event data
source('C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Functions/binary-functions.R')
source('C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Functions/survival-functions.R')
source('C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Functions/cov-functions.R')
source('C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Functions/simulation-functions.R')
source('C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Functions/lstats-functions.R')
# Scenarios
load("C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Simulations/Results/database_Final_Scenarios_H0_True.RData")
data=subset(data,data$theta==5)
168*3
View(data)
################################################################
# SIMULATIONS Statistics Binary and Survival outcomes
# Simulating bivariate binary and survival data
# Last update 2019-01-07 (Eivissa);
# Marta Bofill and Guadalupe Gómez
################################################################
# Functions for the binary and survival setting; for the covariance computation; and for simulating the binary and time-to-event data
source('C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Functions/binary-functions.R')
source('C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Functions/survival-functions.R')
source('C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Functions/cov-functions.R')
source('C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Functions/simulation-functions.R')
source('C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Functions/lstats-functions.R')
# Scenarios
load("C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Simulations/Results/database_Final_Scenarios_H0_True.RData")
data=subset(data,data$theta==5)
# Working directory
setwd("C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Simulations")
#####################################################################################
# PREAMBLE
#####################################################################################
library(copula)
library(pracma) # for using the function 'integral'
library(survival)
require(zoo) # 'rollmean' function
require(muhaz)
# Parameters
alpha=0.05;
z.alpha <- qnorm(1-alpha,0,1)
z.alphac <- qnorm(1-alpha/2,0,1)
# nsim: number of simulations
nsim=1000
# nsim=500
# Note:
# alpha=0.05
# > nsim=500
# > sd=sqrt(alpha*(1-alpha)/nsim)
# > z.alpha <- qnorm(1-alpha,0,1)
# > c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03396795 0.06603205
# > nsim=1000
# > sd=sqrt(alpha*(1-alpha)/nsim)
# > z.alpha <- qnorm(1-alpha,0,1)
# > c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03866363 0.06133637
# simulation seed
set.seed(2023)
t0=Sys.time()
data$Test_Reject_Unpooled=0
data$Test_Reject_Pooled=0
# for(i in 1:1){ # just for testing
for(i in 1:dim(data)[1]){
data$Test_Reject_Unpooled[i] <- sum(replicate(nsim,
fCS.TEST(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
prob0=data$p0[i],
ass.par=3,
ss=data$n[i],
censoring="Unif",
tau=data$tau[i], taub=data$taub[i], rho=data$rho[i], gam=data$gamma[i], eta=data$eta[i],
wb=data$omegab[i], ws=data$omegas[i], var_est='Unpooled')) > z.alpha,na.rm = T)/nsim
data$Test_Reject_Pooled[i] <- sum(replicate(nsim,
fCS.TEST(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
prob0=data$p0[i],
ass.par=3,
ss=data$n[i],
censoring="Unif",
tau=data$tau[i], taub=data$taub[i], rho=data$rho[i], gam=data$gamma[i], eta=data$eta[i],
wb=data$omegab[i], ws=data$omegas[i], var_est='Pooled')) > z.alpha,na.rm = T)/nsim
t1=Sys.time()-t0
cat(i, "\t", data$Test_Reject_Unpooled[i], "\t", data$Test_Reject_Pooled[i], "\t", t1, "\n", file="LOG_PAPER_Results_add.txt", append=TRUE)
save.image("C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Simulations/Results/RESULTS_PAPER_Add.RData")
}
t1=Sys.time()-t0
cat(t1, "\n", file="LOG_PAPER_Results_add.txt", append=TRUE)
(t1)
rm(i)
save.image("C:/Users/Marta.Bofill/Dropbox/Marta-Lupe/2019 PAPER JRSS-B/GITHUB Code/Code_PAPER/Simulations/Results/RESULTS_PAPER_Add.RData")
summary(data)
summary(data[data$taub==0.5,])
summary(data[data$taub==1,])
