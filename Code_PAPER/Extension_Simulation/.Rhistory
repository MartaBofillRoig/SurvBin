# > sd=sqrt(alpha*(1-alpha)/nsim)
# > z.alpha <- qnorm(1-alpha,0,1)
# > c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03396795 0.06603205
# > nsim=1000
# > sd=sqrt(alpha*(1-alpha)/nsim)
# > z.alpha <- qnorm(1-alpha,0,1)
# > c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03866363 0.06133637
# simulation seed
set.seed(1994)
t0=Sys.time()
data$Test_Reject_Unpooled=0
data$Test_Reject_bonferroni=0
data$Test_Reject_boots=0
# for(i in 1:5){ # just for testing
for(i in 1:dim(data)[1]){
data$Test_Reject_Unpooled[i] <- sum(replicate(nsim, try(fCS.TEST(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
prob0=data$p0[i],
ass.par=data$theta[i],
ss=data$n[i],
censoring="Unif",
tau=data$tau[i], taub=data$taub[i], rho=data$rho[i], gam=data$gamma[i],
eta=data$eta[i],
wb=data$omegab[i], ws=data$omegas[i],
var_est='Unpooled'),silent = T)) > z.alpha,na.rm = T)/nsim
data$Test_Reject_bonferroni[i] <- sum(replicate(nsim,(sum(fCS.TEST_Bonf(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
prob0=data$p0[i],
ass.par=data$theta[i],
ss=data$n[i],
censoring="Unif",
tau=data$tau[i], taub=data$taub[i], rho=data$rho[i],
gam=data$gamma[i], eta=data$eta[i])>z.alphac)>=1)))/nsim
data$Test_Reject_boots[i] <- sum(replicate(nsim,
fCS.TEST_boots(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
prob0=data$p0[i],
ass.par=data$theta[i],
ss=data$n[i],
censoring="Unif",
tau=data$tau[i], taub=data$taub[i], rho=data$rho[i], gam=data$gamma[i], eta=data$eta[i],
wb=data$omegab[i], ws=data$omegas[i])) > z.alpha,na.rm = T)/nsim
t1=Sys.time()-t0
cat(i, "\t", t1, "\n", file="LOG_Results.txt", append=TRUE)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/RESULTS_PAPER.RData")
}
t1=Sys.time()-t0
cat(t1, "\n", file="LOG_Results.txt", append=TRUE)
(t1)
rm(i)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/RESULTS_PAPER.RData")
head(data)
################################################################
# SIMULATIONS Statistics Binary and Survival outcomes
# Marta Bofill and Guadalupe GÃ³mez
################################################################
rm(list = ls())
# Working directory
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation")
#####################################################################################
# PREAMBLE
#####################################################################################
library(copula)
library(pracma) # for using the function 'integral'
library(survival)
library(zoo) # 'rollmean' function
library(muhaz)
library(tidyr)
library(purrr) # 'possibly' function
#####################################################################################
# Scenarios
#####################################################################################
a=c(0.5,1,2)
b=c(1)
tau=1
taub= c(0.5,1)
r=c(1,3) #unif
p0=c(0.2, 0.4)
theta=c(0.001,2,3)
n=c(100)
# test
eta=c(1)
rho=c(0,1)
gamma=c(0,1)
omegab=c(0.5)
# omegab=c(0.25,0.5,0.75)
data = tidyr::expand_grid(a,b,tau,taub,r,p0,theta,n,eta,rho,gamma,omegab)
data$omegas=1-data$omegab
# data = subset(data,data$eta+data$rho+data$gamma>0) #eta=1
rm(a,b,taub,tau,r,p0,omegab,theta,n,eta,rho,gamma)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/database_Scenarios_H0_True.RData")
#####################################################################################
# Functions for the binary and survival setting; for the covariance computation; and for simulating the binary and time-to-event data
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/binary-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/survival-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/cov-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/simulation-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/lstats-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/lstats_boots.R')
#####################################################################################
#####################################################################################
# Parameters
alpha=0.05;
z.alpha <- qnorm(1-alpha,0,1)
z.alphac <- qnorm(1-alpha/2,0,1)
# nsim: number of simulations
nsim=1000
# Note:
# alpha=0.05
# > nsim=500
# > sd=sqrt(alpha*(1-alpha)/nsim)
# > z.alpha <- qnorm(1-alpha,0,1)
# > c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03396795 0.06603205
# > nsim=1000
# > sd=sqrt(alpha*(1-alpha)/nsim)
# > z.alpha <- qnorm(1-alpha,0,1)
# > c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03866363 0.06133637
# simulation seed
set.seed(1994)
t0=Sys.time()
# data$Test_Reject_Unpooled=0
data$Test_Reject_bonferroni=0
data$Test_Reject_boots=0
# for(i in 1:5){ # just for testing
for(i in 1:dim(data)[1]){
# data$Test_Reject_Unpooled[i] <- sum(replicate(nsim, try(fCS.TEST(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
#                                                              prob0=data$p0[i],
#                                                              ass.par=data$theta[i],
#                                                              ss=data$n[i],
#                                                              censoring="Unif",
#                                                              tau=data$tau[i], taub=data$taub[i], rho=data$rho[i], gam=data$gamma[i],
#                                                              eta=data$eta[i],
#                                                              wb=data$omegab[i], ws=data$omegas[i],
#                                                              var_est='Unpooled'),silent = T)) > z.alpha,na.rm = T)/nsim
data$Test_Reject_bonferroni[i] <- sum(replicate(nsim,(sum(fCS.TEST_Bonf(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
prob0=data$p0[i],
ass.par=data$theta[i],
ss=data$n[i],
censoring="Unif",
tau=data$tau[i], taub=data$taub[i], rho=data$rho[i],
gam=data$gamma[i], eta=data$eta[i])>z.alphac)>=1)))/nsim
data$Test_Reject_boots[i] <- sum(replicate(nsim,
fCS.TEST_boots(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
prob0=data$p0[i],
ass.par=data$theta[i],
ss=data$n[i],
censoring="Unif",
tau=data$tau[i], taub=data$taub[i], rho=data$rho[i], gam=data$gamma[i], eta=data$eta[i],
wb=data$omegab[i], ws=data$omegas[i])) > z.alpha,na.rm = T)/nsim
t1=Sys.time()-t0
cat(i, "\t", t1, "\n", file="LOG_Results.txt", append=TRUE)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/RESULTS_PAPER_b.RData")
}
t1=Sys.time()-t0
cat(t1, "\n", file="LOG_Results.txt", append=TRUE)
(t1)
rm(i)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/RESULTS_PAPER_b.RData")
head(data)
rm(list = ls())
# Working directory
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation")
#####################################################################################
# PREAMBLE
#####################################################################################
library(copula)
library(pracma) # for using the function 'integral'
library(survival)
library(zoo) # 'rollmean' function
library(muhaz)
library(tidyr)
library(purrr) # 'possibly' function
#####################################################################################
# Scenarios
#####################################################################################
a=c(0.5,1,2)
b=c(1)
tau=1
taub= c(0.5,1)
r=c(1,3) #unif
p0=c(0.2, 0.4)
theta=c(0.001,2,3)
n=c(100)
# test
eta=c(1)
rho=c(0,1)
gamma=c(0,1)
omegab=c(0.5)
# omegab=c(0.25,0.5,0.75)
data = tidyr::expand_grid(a,b,tau,taub,r,p0,theta,n,eta,rho,gamma,omegab)
data$omegas=1-data$omegab
# data = subset(data,data$eta+data$rho+data$gamma>0) #eta=1
rm(a,b,taub,tau,r,p0,omegab,theta,n,eta,rho,gamma)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/database_Scenarios_H0_True.RData")
#####################################################################################
# Functions for the binary and survival setting; for the covariance computation; and for simulating the binary and time-to-event data
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/binary-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/survival-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/cov-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/simulation-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/lstats-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/lstats_boots.R')
#####################################################################################
#####################################################################################
# Parameters
alpha=0.05;
z.alpha <- qnorm(1-alpha,0,1)
z.alphac <- qnorm(1-alpha/2,0,1)
# nsim: number of simulations
nsim=1000
# Note:
# alpha=0.05
# > nsim=500
# > sd=sqrt(alpha*(1-alpha)/nsim)
# > z.alpha <- qnorm(1-alpha,0,1)
# > c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03396795 0.06603205
# > nsim=1000
# > sd=sqrt(alpha*(1-alpha)/nsim)
# > z.alpha <- qnorm(1-alpha,0,1)
# > c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03866363 0.06133637
# simulation seed
set.seed(1994)
t0=Sys.time()
# data$Test_Reject_Unpooled=0
data$Test_Reject_bonferroni=0
data$Test_Reject_boots=0
# for(i in 1:5){ # just for testing
for(i in 1:dim(data)[1]){
# data$Test_Reject_Unpooled[i] <- sum(replicate(nsim, try(fCS.TEST(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
#                                                              prob0=data$p0[i],
#                                                              ass.par=data$theta[i],
#                                                              ss=data$n[i],
#                                                              censoring="Unif",
#                                                              tau=data$tau[i], taub=data$taub[i], rho=data$rho[i], gam=data$gamma[i],
#                                                              eta=data$eta[i],
#                                                              wb=data$omegab[i], ws=data$omegas[i],
#                                                              var_est='Unpooled'),silent = T)) > z.alpha,na.rm = T)/nsim
data$Test_Reject_bonferroni[i] <- sum(replicate(nsim,(sum(fCS.TEST_Bonf(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
prob0=data$p0[i],
ass.par=data$theta[i],
ss=data$n[i],
censoring="Unif",
tau=data$tau[i], taub=data$taub[i], rho=data$rho[i],
gam=data$gamma[i], eta=data$eta[i])>z.alphac)>=1)))/nsim
t1=Sys.time()-t0
cat(i, "\t", t1, "\n", file="LOG_Results_bonf.txt", append=TRUE)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/RESULTS_PAPER_bonf.RData")
}
t1=Sys.time()-t0
cat(t1, "\n", file="LOG_Results_bonf.txt", append=TRUE)
(t1)
rm(i)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/RESULTS_PAPER_bonf.RData")
summary(data)
load("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/database_Scenarios_H0_True.RData")
rm(list = ls())
# Working directory
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation")
#####################################################################################
# PREAMBLE
#####################################################################################
library(copula)
library(pracma) # for using the function 'integral'
library(survival)
library(zoo) # 'rollmean' function
library(muhaz)
library(tidyr)
library(purrr) # 'possibly' function
#####################################################################################
# Scenarios
#####################################################################################
a=c(0.5,1,2)
b=c(1)
tau=1
taub= c(0.5,1)
r=c(1,3) #unif
p0=c(0.2, 0.4)
theta=c(0.001,2,3)
n=c(100)
# test
eta=c(1)
rho=c(0,1)
gamma=c(0,1)
omegab=c(0.5)
# omegab=c(0.25,0.5,0.75)
data = tidyr::expand_grid(a,b,tau,taub,r,p0,theta,n,eta,rho,gamma,omegab)
data$omegas=1-data$omegab
# data = subset(data,data$eta+data$rho+data$gamma>0) #eta=1
rm(a,b,taub,tau,r,p0,omegab,theta,n,eta,rho,gamma)
# Functions for the binary and survival setting; for the covariance computation; and for simulating the binary and time-to-event data
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/binary-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/survival-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/cov-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/simulation-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/lstats-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/lstats_boots.R')
########################
View(lstats_boots)
rm(list = ls())
# Working directory
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation")
#####################################################################################
# PREAMBLE
#####################################################################################
library(copula)
library(pracma) # for using the function 'integral'
library(survival)
library(zoo) # 'rollmean' function
library(muhaz)
library(tidyr)
library(purrr) # 'possibly' function
#####################################################################################
# Scenarios
#####################################################################################
a=c(0.5,1,2)
b=c(1)
tau=1
taub= c(0.5,1)
r=c(1,3) #unif
p0=c(0.2, 0.4)
theta=c(0.001,2,3)
n=c(100)
# test
eta=c(1)
rho=c(0,1)
gamma=c(0,1)
omegab=c(0.5)
# omegab=c(0.25,0.5,0.75)
data = tidyr::expand_grid(a,b,tau,taub,r,p0,theta,n,eta,rho,gamma,omegab)
data$omegas=1-data$omegab
# data = subset(data,data$eta+data$rho+data$gamma>0) #eta=1
rm(a,b,taub,tau,r,p0,omegab,theta,n,eta,rho,gamma)
#########################
# Functions for the binary and survival setting; for the covariance computation; and for simulating the binary and time-to-event data
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/binary-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/survival-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/cov-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/simulation-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Functions/lstats-functions.R')
source('C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/lstats_boots.R')
alpha=0.05;
z.alpha <- qnorm(1-alpha,0,1)
z.alphac <- qnorm(1-alpha/2,0,1)
# nsim: number of simulations
nsim=1000
# Note:
# alpha=0.05
# > nsim=500
# > sd=sqrt(alpha*(1-alpha)/nsim)
# > z.alpha <- qnorm(1-alpha,0,1)
# > c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03396795 0.06603205
# > nsim=1000
# > sd=sqrt(alpha*(1-alpha)/nsim)
# > z.alpha <- qnorm(1-alpha,0,1)
# > c(alpha-z.alpha*sd,alpha+z.alpha*sd)
# [1] 0.03866363 0.06133637
# simulation seed
set.seed(1994)
t0=Sys.time()
# data$Test_Reject_Unpooled=0
# data$Test_Reject_bonferroni=0
data$Test_Reject_boots=0
# for(i in 1:5){ # just for testing
for(i in 1:dim(data)[1]){
data$Test_Reject_boots[i] <- sum(replicate(nsim,
fCS.TEST_boots(a.shape=data$a[i], b.scale=data$b[i], rate.param=data$r[i],
prob0=data$p0[i],
ass.par=data$theta[i],
ss=data$n[i],
censoring="Unif",
tau=data$tau[i], taub=data$taub[i], rho=data$rho[i], gam=data$gamma[i], eta=data$eta[i],
wb=data$omegab[i], ws=data$omegas[i])) > z.alpha,na.rm = T)/nsim
t1=Sys.time()-t0
cat(i, "\t", t1, "\n", file="LOG_Results_boots.txt", append=TRUE)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/RESULTS_PAPER_boots.RData")
}
t1=Sys.time()-t0
cat(t1, "\n", file="LOG_Results_boots.txt", append=TRUE)
(t1)
rm(i)
save.image("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/RESULTS_PAPER_boots.RData")
summary(data)
load("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/RESULTS_PAPER_bonf.RData")
View(data)
load("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/RESULTS_PAPER_boots.RData")
View(data)
load("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/RESULTS_PAPER_boots.RData")
Test_Reject_boots = data$Test_Reject_boots
load("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/RESULTS_PAPER_bonf.RData")
View(data)
data$Test_Reject_boots = Test_Reject_boots
summary(data)
library(ggplot2)
library(gridExtra)
library(ggpubr)
windows(height = 7, width = 7)
fig_b <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_b1 <-  ggplot(subset(data,data$eta==0), aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_b2 <-  ggplot(subset(data,data$eta==1), aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
warnings()
#
data$cases = 0
for(i in 1:dim(data)[1]){
if(data$a[i]==0.5 & data$taub[i]==0.5) data$cases[i]= 1
if(data$a[i]==1 & data$taub[i]==0.5) data$cases[i]= 2
if(data$a[i]==2 & data$taub[i]==0.5) data$cases[i]= 3
if(data$a[i]==0.5 & data$taub[i]==1) data$cases[i]= 4
if(data$a[i]==1 & data$taub[i]==1) data$cases[i]= 5
if(data$a[i]==2 & data$taub[i]==1) data$cases[i]= 6
}
data$cases = as.factor(data$cases)
#
windows(height = 7, width = 7)
fig_b <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_b1 <-  ggplot(subset(data,data$eta==0), aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_b2 <-  ggplot(subset(data,data$eta==1), aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
ggarrange(fig_b, fig_b1,fig_b2, ncol=3, nrow=1, common.legend = TRUE, legend="bottom")
data$cases = 0
for(i in 1:dim(data)[1]){
if(data$a[i]==0.5 & data$taub[i]==0.5) data$cases[i]= 1
if(data$a[i]==1 & data$taub[i]==0.5) data$cases[i]= 2
if(data$a[i]==2 & data$taub[i]==0.5) data$cases[i]= 3
if(data$a[i]==0.5 & data$taub[i]==1) data$cases[i]= 4
if(data$a[i]==1 & data$taub[i]==1) data$cases[i]= 5
if(data$a[i]==2 & data$taub[i]==1) data$cases[i]= 6
}
data$cases = as.factor(data$cases)
#
data$cases = 0
for(i in 1:dim(data)[1]){
if(data$a[i]==0.5 & data$taub[i]==0.5) data$cases[i]= 1
if(data$a[i]==1 & data$taub[i]==0.5) data$cases[i]= 2
if(data$a[i]==2 & data$taub[i]==0.5) data$cases[i]= 3
if(data$a[i]==0.5 & data$taub[i]==1) data$cases[i]= 4
if(data$a[i]==1 & data$taub[i]==1) data$cases[i]= 5
if(data$a[i]==2 & data$taub[i]==1) data$cases[i]= 6
}
data$cases = as.factor(data$cases)
#
##
data$cases_p = 0
for(i in 1:dim(data)[1]){
if(data$p0[i]==0.2 & data$taub[i]==0.5) data$cases_p[i]= 1
if(data$p0[i]==0.4 & data$taub[i]==0.5) data$cases_p[i]= 2
if(data$p0[i]==0.2 & data$taub[i]==1) data$cases_p[i]= 3
if(data$p0[i]==0.4 & data$taub[i]==1) data$cases_p[i]= 4
}
data$cases_p = as.factor(data$cases_p)
summary(data$cases_p)
##
data$cases_tau = 0
for(i in 1:dim(data)[1]){
if(data$theta[i]==0.001 & data$taub[i]==0.5) data$cases_tau[i]= 1
if(data$theta[i]==2 & data$taub[i]==0.5) data$cases_tau[i]= 2
if(data$theta[i]==3 & data$taub[i]==0.5) data$cases_tau[i]= 3
if(data$theta[i]==0.001 & data$taub[i]==1) data$cases_tau[i]= 4
if(data$theta[i]==2 & data$taub[i]==1) data$cases_tau[i]= 5
if(data$theta[i]==3 & data$taub[i]==1) data$cases_tau[i]= 6
}
data$cases_tau = as.factor(data$cases_tau)
summary(data$cases_tau)
##
data$i= 1:dim(data)[1]
#
windows(height = 7, width = 7)
fig_b <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_b1 <-  ggplot(subset(data,data$eta==0), aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_b2 <-  ggplot(subset(data,data$eta==1), aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
ggarrange(fig_b, fig_b1,fig_b2, ncol=3, nrow=1, common.legend = TRUE, legend="bottom")
windows(height = 7, width = 7)
fig_boots <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_bonf <-  ggplot(data, aes(x=i, y=Test_Reject_bonferroni, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
ggarrange(fig_boots,fig_bonf, ncol=2, nrow=1, common.legend = TRUE, legend="bottom")
ggplot(data, aes(x=i, y=Test_Reject_bonferroni, color=as.factor(cases_tau)))  +
geom_boxplot()
fig_bonf <-  ggplot(data, aes(x=i, y=Test_Reject_bonferroni, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_boots <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_boots_box <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_boxplot()
fig_bonf_box <-  ggplot(data, aes(x=i, y=Test_Reject_bonferroni, color=as.factor(cases_tau)))  +
geom_boxplot()
ggarrange(fig_boots,fig_bonf,fig_boots_box,fig_bonf_box, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
windows(height = 7, width = 7)
fig_boots <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Test_Reject_boots", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_bonf <-  ggplot(data, aes(x=i, y=Test_Reject_bonferroni, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Test_Reject_bonferroni", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_boots_box <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_boxplot()
fig_bonf_box <-  ggplot(data, aes(x=i, y=Test_Reject_bonferroni, color=as.factor(cases_tau)))  +
geom_boxplot()
ggarrange(fig_boots,fig_bonf,fig_boots_box,fig_bonf_box, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
t1
load("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/RESULTS_PAPER_boots.RData")
t1
