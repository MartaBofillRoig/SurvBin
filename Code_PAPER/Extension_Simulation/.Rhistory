Test_Reject_boots = data$Test_Reject_boots
load("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/RESULTS_PAPER_bonf.RData")
View(data)
data$Test_Reject_boots = Test_Reject_boots
summary(data)
library(ggplot2)
library(gridExtra)
library(ggpubr)
windows(height = 7, width = 7)
fig_b <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_b1 <-  ggplot(subset(data,data$eta==0), aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_b2 <-  ggplot(subset(data,data$eta==1), aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
warnings()
#
data$cases = 0
for(i in 1:dim(data)[1]){
if(data$a[i]==0.5 & data$taub[i]==0.5) data$cases[i]= 1
if(data$a[i]==1 & data$taub[i]==0.5) data$cases[i]= 2
if(data$a[i]==2 & data$taub[i]==0.5) data$cases[i]= 3
if(data$a[i]==0.5 & data$taub[i]==1) data$cases[i]= 4
if(data$a[i]==1 & data$taub[i]==1) data$cases[i]= 5
if(data$a[i]==2 & data$taub[i]==1) data$cases[i]= 6
}
data$cases = as.factor(data$cases)
#
windows(height = 7, width = 7)
fig_b <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_b1 <-  ggplot(subset(data,data$eta==0), aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_b2 <-  ggplot(subset(data,data$eta==1), aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
ggarrange(fig_b, fig_b1,fig_b2, ncol=3, nrow=1, common.legend = TRUE, legend="bottom")
data$cases = 0
for(i in 1:dim(data)[1]){
if(data$a[i]==0.5 & data$taub[i]==0.5) data$cases[i]= 1
if(data$a[i]==1 & data$taub[i]==0.5) data$cases[i]= 2
if(data$a[i]==2 & data$taub[i]==0.5) data$cases[i]= 3
if(data$a[i]==0.5 & data$taub[i]==1) data$cases[i]= 4
if(data$a[i]==1 & data$taub[i]==1) data$cases[i]= 5
if(data$a[i]==2 & data$taub[i]==1) data$cases[i]= 6
}
data$cases = as.factor(data$cases)
#
data$cases = 0
for(i in 1:dim(data)[1]){
if(data$a[i]==0.5 & data$taub[i]==0.5) data$cases[i]= 1
if(data$a[i]==1 & data$taub[i]==0.5) data$cases[i]= 2
if(data$a[i]==2 & data$taub[i]==0.5) data$cases[i]= 3
if(data$a[i]==0.5 & data$taub[i]==1) data$cases[i]= 4
if(data$a[i]==1 & data$taub[i]==1) data$cases[i]= 5
if(data$a[i]==2 & data$taub[i]==1) data$cases[i]= 6
}
data$cases = as.factor(data$cases)
#
##
data$cases_p = 0
for(i in 1:dim(data)[1]){
if(data$p0[i]==0.2 & data$taub[i]==0.5) data$cases_p[i]= 1
if(data$p0[i]==0.4 & data$taub[i]==0.5) data$cases_p[i]= 2
if(data$p0[i]==0.2 & data$taub[i]==1) data$cases_p[i]= 3
if(data$p0[i]==0.4 & data$taub[i]==1) data$cases_p[i]= 4
}
data$cases_p = as.factor(data$cases_p)
summary(data$cases_p)
##
data$cases_tau = 0
for(i in 1:dim(data)[1]){
if(data$theta[i]==0.001 & data$taub[i]==0.5) data$cases_tau[i]= 1
if(data$theta[i]==2 & data$taub[i]==0.5) data$cases_tau[i]= 2
if(data$theta[i]==3 & data$taub[i]==0.5) data$cases_tau[i]= 3
if(data$theta[i]==0.001 & data$taub[i]==1) data$cases_tau[i]= 4
if(data$theta[i]==2 & data$taub[i]==1) data$cases_tau[i]= 5
if(data$theta[i]==3 & data$taub[i]==1) data$cases_tau[i]= 6
}
data$cases_tau = as.factor(data$cases_tau)
summary(data$cases_tau)
##
data$i= 1:dim(data)[1]
#
windows(height = 7, width = 7)
fig_b <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_b1 <-  ggplot(subset(data,data$eta==0), aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_b2 <-  ggplot(subset(data,data$eta==1), aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
ggarrange(fig_b, fig_b1,fig_b2, ncol=3, nrow=1, common.legend = TRUE, legend="bottom")
windows(height = 7, width = 7)
fig_boots <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_bonf <-  ggplot(data, aes(x=i, y=Test_Reject_bonferroni, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
ggarrange(fig_boots,fig_bonf, ncol=2, nrow=1, common.legend = TRUE, legend="bottom")
ggplot(data, aes(x=i, y=Test_Reject_bonferroni, color=as.factor(cases_tau)))  +
geom_boxplot()
fig_bonf <-  ggplot(data, aes(x=i, y=Test_Reject_bonferroni, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_boots <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Significance level (Unpooled variance)", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_boots_box <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_boxplot()
fig_bonf_box <-  ggplot(data, aes(x=i, y=Test_Reject_bonferroni, color=as.factor(cases_tau)))  +
geom_boxplot()
ggarrange(fig_boots,fig_bonf,fig_boots_box,fig_bonf_box, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
windows(height = 7, width = 7)
fig_boots <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Test_Reject_boots", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_bonf <-  ggplot(data, aes(x=i, y=Test_Reject_bonferroni, color=as.factor(cases_tau)))  +
geom_point(size=2) + labs(y = "Test_Reject_bonferroni", x="Scenarios", color=expression(tau[b]))  + coord_cartesian(ylim = c(0, 0.1))   + scale_color_manual(name= expression(paste("(",theta, "," ,tau, ")")),labels = c("(0.001,0.5)","(2,0.5)","(3,0.5)","(0.001,1)","(2,1)","(3,1)"), values=c(1,2,3,4,5,6))
fig_boots_box <-  ggplot(data, aes(x=i, y=Test_Reject_boots, color=as.factor(cases_tau)))  +
geom_boxplot()
fig_bonf_box <-  ggplot(data, aes(x=i, y=Test_Reject_bonferroni, color=as.factor(cases_tau)))  +
geom_boxplot()
ggarrange(fig_boots,fig_bonf,fig_boots_box,fig_bonf_box, ncol=2, nrow=2, common.legend = TRUE, legend="bottom")
t1
load("C:/Users/Marta/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation/results/RESULTS_PAPER_boots.RData")
t1
# Working directory
setwd("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/survivalbinary/Code_PAPER/Extension_Simulation")
#####################################################################################
# PREAMBLE
#####################################################################################
library(copula)
library(pracma) # for using the function 'integral'
library(survival)
library(zoo) # 'rollmean' function
library(muhaz)
library(tidyr)
library(purrr) # 'possibly' function
#####################################################################################
# Scenarios
#####################################################################################
a=c(0.5,1,2)
b=c(1)
tau=1
taub= c(0.5,1)
r=c(1,3) #unif
p0=c(0.2, 0.4)
theta=c(0.001,2,3)
n=c(100)
# test
eta=c(1)
rho=c(0,1)
gamma=c(0,1)
omegab=c(0.5)
# omegab=c(0.25,0.5,0.75)
data = tidyr::expand_grid(a,b,tau,taub,r,p0,theta,n,eta,rho,gamma,omegab)
data$omegas=1-data$omegab
View(data)
load(("C:/Users/mbofi/Dropbox/C5/Scripts/GitKraken/CBE_selection/results/results_decision_H0.RData"))
summary(dataset)
alpha=0.025
nsim=100000
sd=sqrt(alpha*(1-alpha)/nsim)
z.alpha <- qnorm(1-alpha,0,1)
c(alpha-z.alpha*sd,alpha+z.alpha*sd)
alpha=0.025
nsim=100000
sd=sqrt(alpha*(1-alpha)/nsim)
z.alpha <- qnorm(1-alpha,0,1)
c(alpha-z.alpha*sd,alpha+z.alpha*sd)
install.packages("copula")
install.packages(c("pracma","survival","zoo","muhaz",@purrr))
install.packages(c("pracma","survival","zoo","muhaz","purrr"))
install.packages(c("pracma", "survival", "zoo", "muhaz", "purrr"))
install.packages("rms")
# EXAMPLE Surv+Binary
############################################
library(survival)
library(rms)
library(copula)
set.seed(321)
# PARAMETERS
######################################
H0=FALSE
# H0=FALSE
a=0.5;b=1;tau0=0;tau=3;n0=500; HR=1/0.65;n1=500;
tstar= 0.3
p=0.2
# p: proportion of subjects who will survive beyond tstar
# tstar: treatment delayed duration since randomiation
p1=(1+22)/403
p0=0.1
# p1=0.01
# p0=0.05
######################################
# RE-PARAMETRIZATION for time-to-event simulation
lambda=(1/b)^a
rho=a
######################################
######################################
# Copula for binary and time-to-event
######################################
# Select the copula
cp <- claytonCopula(param = c(0.5), dim = 2)
# cp <- frankCopula(param = c(2), dim = 2)
# Generate the multivariate distribution with normal and t marginals
copulaSB <- mvdc(copula = cp,
margins = c("unif", "unif"),
paramMargins = list(list(0,1),
list(0,1)))
copulaSB_delbefore <- mvdc(copula = cp,
margins = c("unif", "unif"),
paramMargins = list(list(min=exp(-tstar*lambda), max=1),
list(0,1)))
copulaSB_delbeyond <- mvdc(copula = cp,
margins = c("unif", "unif"),
paramMargins = list(list(min=0, max=exp(-tstar*lambda)),
list(0,1)))
# windows()
# persp(copulaSB, pMvdc, xlim = c(0, 4), ylim=c(0, 4), xlab='F(x)', lwd=2, ylab='G(y)', zlab='H(x, y)')
# TREATMENT GROUP
######################################
# TE1 = rweibull(n1,a,b)
v = rMvdc(n1,copulaSB)
BE1 = ifelse(v[,2]<p1, 1, 0)
TE1 = (-log(v[,1])/(lambda))^(1/rho)
TE1 = TE1+tau0
# TC1 = runif(n1, tau0, tau)
TC1 = rexp(n=n1, rate = 1)
time1= ifelse(TE1<=TC1, TE1,TC1)
status1 = ifelse(TE1<=TC1 & TE1<tau,1,0)
treat1 = rep(1,n1)
sim1 <- data.frame(BE1,time1,status1,treat1)
# CONTROL GROUP
######################################
if(H0==TRUE){
v = rMvdc(n0,copulaSB)
BE0 = ifelse(v[,2]<p1, 1, 0)
TE0 = (-log(v[,1])/(lambda))^(1/rho)
TE0 =TE0+tau0
}else{
# before tstar
v = rMvdc(n=n0*p,copulaSB_delbefore)
BE0_bef = ifelse(v[,2]<p0, 1, 0)
TE0_bef = (-log(v[,1])/(lambda))^(1/rho)
TE0_bef =TE0_bef+tau0
# beyond tstar
v = rMvdc(n=n0*(1-p),copulaSB_delbeyond)
BE0_bey = ifelse(v[,2]<p0, 1, 0)
TE0_bey = (-log(v[,1])/(lambda*HR))^(1/rho)
TE0_bey =TE0_bey+tau0
BE0=c(BE0_bef,BE0_bey)
TE0=c(TE0_bef,TE0_bey)
}
# TC0 = runif(n0, tau0,tau)
TC0 = rexp(n=n0, rate = 1)
time0= ifelse(TE0<=TC0, TE0,TC0)
status0 = ifelse(TE0<=TC0 & TE0<tau,1,0)
treat0 = rep(0,n0)
sim0 <- data.frame(BE0,time0,status0,treat0)
# TWO-SAMPLE DATA
######################################
# data = data.frame(time=c(sim1$time1,sim0$time0), status=c(sim1$status1,sim0$status0),treat=c(sim1$treat1,sim0$treat0))
data = data.frame(binary=c(sim1$BE1, sim0$BE0), time=c(24*sim1$time1,24*sim0$time0), status=c(sim1$status1,sim0$status0),treat=c(sim1$treat1,sim0$treat0))
sum(subset(data, data$treat==1)$binary)/n1
sum(subset(data, data$treat==0)$binary)/n0
####
# PLOTS KAPLAN-MEIER ESTIMATORS
######################################
windows()
fit.rms <- npsurv(Surv(time=time,event=status)~treat, data)
survplot(fit  = fit.rms,
conf = c("none","bands","bars")[2],
xlab = "", ylab = "Survival",
xlim=c(0,60),
# label.curves = TRUE,                     # label curves directly
label.curves = list(keys = "lines"),  # legend instead of direct label
levels.only  = FALSE,                    # show only levels, no label
abbrev.label = FALSE,                    # if label used, abbreviate
## fun = function(x) {1 - x},            # Cumulative probability plot
loglog   = FALSE,                        # log(-log Survival) plot
logt     = FALSE,                        # log time
time.inc = 4,                          # time increment
dots     = TRUE,                         # dot grid
n.risk   = TRUE,                          # show number at risk
cex.n.risk=0.8,
col=c("red","blue"),lwd=2,lty=1
)
# EXAMPLE Surv+Binary
############################################
library(survival)
library(rms)
library(copula)
set.seed(321)
# PARAMETERS
######################################
H0=FALSE
# H0=FALSE
a=0.5;b=1;tau0=0;tau=3;n0=500; HR=1/0.65;n1=500;
tstar= 0.3
p=0.2
# p: proportion of subjects who will survive beyond tstar
# tstar: treatment delayed duration since randomiation
p1=(1+22)/403
p0=0.1
# p1=0.01
# p0=0.05
######################################
# RE-PARAMETRIZATION for time-to-event simulation
lambda=(1/b)^a
rho=a
######################################
######################################
# Copula for binary and time-to-event
######################################
# Select the copula
cp <- claytonCopula(param = c(0.5), dim = 2)
# cp <- frankCopula(param = c(2), dim = 2)
# Generate the multivariate distribution with normal and t marginals
copulaSB <- mvdc(copula = cp,
margins = c("unif", "unif"),
paramMargins = list(list(0,1),
list(0,1)))
copulaSB_delbefore <- mvdc(copula = cp,
margins = c("unif", "unif"),
paramMargins = list(list(min=exp(-tstar*lambda), max=1),
list(0,1)))
copulaSB_delbeyond <- mvdc(copula = cp,
margins = c("unif", "unif"),
paramMargins = list(list(min=0, max=exp(-tstar*lambda)),
list(0,1)))
# windows()
# persp(copulaSB, pMvdc, xlim = c(0, 4), ylim=c(0, 4), xlab='F(x)', lwd=2, ylab='G(y)', zlab='H(x, y)')
# TREATMENT GROUP
######################################
# TE1 = rweibull(n1,a,b)
v = rMvdc(n1,copulaSB)
BE1 = ifelse(v[,2]<p1, 1, 0)
TE1 = (-log(v[,1])/(lambda))^(1/rho)
TE1 = TE1+tau0
# TC1 = runif(n1, tau0, tau)
TC1 = rexp(n=n1, rate = 1)
time1= ifelse(TE1<=TC1, TE1,TC1)
status1 = ifelse(TE1<=TC1 & TE1<tau,1,0)
treat1 = rep(1,n1)
sim1 <- data.frame(BE1,time1,status1,treat1)
# CONTROL GROUP
######################################
if(H0==TRUE){
v = rMvdc(n0,copulaSB)
BE0 = ifelse(v[,2]<p1, 1, 0)
TE0 = (-log(v[,1])/(lambda))^(1/rho)
TE0 =TE0+tau0
}else{
# before tstar
v = rMvdc(n=n0*p,copulaSB_delbefore)
BE0_bef = ifelse(v[,2]<p0, 1, 0)
TE0_bef = (-log(v[,1])/(lambda))^(1/rho)
TE0_bef =TE0_bef+tau0
# beyond tstar
v = rMvdc(n=n0*(1-p),copulaSB_delbeyond)
BE0_bey = ifelse(v[,2]<p0, 1, 0)
TE0_bey = (-log(v[,1])/(lambda*HR))^(1/rho)
TE0_bey =TE0_bey+tau0
BE0=c(BE0_bef,BE0_bey)
TE0=c(TE0_bef,TE0_bey)
}
# TC0 = runif(n0, tau0,tau)
TC0 = rexp(n=n0, rate = 1)
time0= ifelse(TE0<=TC0, TE0,TC0)
status0 = ifelse(TE0<=TC0 & TE0<tau,1,0)
treat0 = rep(0,n0)
sim0 <- data.frame(BE0,time0,status0,treat0)
# TWO-SAMPLE DATA
######################################
# data = data.frame(time=c(sim1$time1,sim0$time0), status=c(sim1$status1,sim0$status0),treat=c(sim1$treat1,sim0$treat0))
data = data.frame(binary=c(sim1$BE1, sim0$BE0), time=c(sim1$time1,sim0$time0), status=c(sim1$status1,sim0$status0),treat=c(sim1$treat1,sim0$treat0))
sum(subset(data, data$treat==1)$binary)/n1
sum(subset(data, data$treat==0)$binary)/n0
sum(subset(data, data$treat==1)$binary)/n1
sum(subset(data, data$treat==0)$binary)/n0
######################################
# PLOTS KAPLAN-MEIER ESTIMATORS
######################################
windows()
fit.rms <- npsurv(Surv(time=time,event=status)~treat, data)
survplot(fit  = fit.rms,
conf = c("none","bands","bars")[2],
xlab = "", ylab = "Survival",
# xlim=c(0,60),
# label.curves = TRUE,                     # label curves directly
label.curves = list(keys = "lines"),  # legend instead of direct label
levels.only  = FALSE,                    # show only levels, no label
abbrev.label = FALSE,                    # if label used, abbreviate
## fun = function(x) {1 - x},            # Cumulative probability plot
loglog   = FALSE,                        # log(-log Survival) plot
logt     = FALSE,                        # log time
time.inc = 4,                          # time increment
dots     = TRUE,                         # dot grid
n.risk   = TRUE,                          # show number at risk
cex.n.risk=0.8,
col=c("red","blue"),lwd=2,lty=1
)
# EXAMPLE Surv+Binary
############################################
library(survival)
library(rms)
library(copula)
set.seed(321)
# PARAMETERS
######################################
H0=FALSE
# H0=FALSE
a=0.5;b=1;tau0=0;tau=3;n0=500; HR=1/0.65;n1=500;
tstar= 0
p=0.2
# p: proportion of subjects who will survive beyond tstar
# tstar: treatment delayed duration since randomiation
p1=(1+22)/403
p0=0.1
# p1=0.01
# p0=0.05
######################################
# RE-PARAMETRIZATION for time-to-event simulation
lambda=(1/b)^a
rho=a
######################################
######################################
# Copula for binary and time-to-event
######################################
# Select the copula
cp <- claytonCopula(param = c(0.5), dim = 2)
# cp <- frankCopula(param = c(2), dim = 2)
# Generate the multivariate distribution with normal and t marginals
copulaSB <- mvdc(copula = cp,
margins = c("unif", "unif"),
paramMargins = list(list(0,1),
list(0,1)))
copulaSB_delbefore <- mvdc(copula = cp,
margins = c("unif", "unif"),
paramMargins = list(list(min=exp(-tstar*lambda), max=1),
list(0,1)))
copulaSB_delbeyond <- mvdc(copula = cp,
margins = c("unif", "unif"),
paramMargins = list(list(min=0, max=exp(-tstar*lambda)),
list(0,1)))
# windows()
# persp(copulaSB, pMvdc, xlim = c(0, 4), ylim=c(0, 4), xlab='F(x)', lwd=2, ylab='G(y)', zlab='H(x, y)')
# TREATMENT GROUP
######################################
# TE1 = rweibull(n1,a,b)
v = rMvdc(n1,copulaSB)
BE1 = ifelse(v[,2]<p1, 1, 0)
TE1 = (-log(v[,1])/(lambda))^(1/rho)
TE1 = TE1+tau0
# TC1 = runif(n1, tau0, tau)
TC1 = rexp(n=n1, rate = 1)
time1= ifelse(TE1<=TC1, TE1,TC1)
status1 = ifelse(TE1<=TC1 & TE1<tau,1,0)
treat1 = rep(1,n1)
sim1 <- data.frame(BE1,time1,status1,treat1)
# CONTROL GROUP
######################################
if(H0==TRUE){
v = rMvdc(n0,copulaSB)
BE0 = ifelse(v[,2]<p1, 1, 0)
TE0 = (-log(v[,1])/(lambda))^(1/rho)
TE0 =TE0+tau0
}else{
# before tstar
v = rMvdc(n=n0*p,copulaSB_delbefore)
BE0_bef = ifelse(v[,2]<p0, 1, 0)
TE0_bef = (-log(v[,1])/(lambda))^(1/rho)
TE0_bef =TE0_bef+tau0
# beyond tstar
v = rMvdc(n=n0*(1-p),copulaSB_delbeyond)
BE0_bey = ifelse(v[,2]<p0, 1, 0)
TE0_bey = (-log(v[,1])/(lambda*HR))^(1/rho)
TE0_bey =TE0_bey+tau0
BE0=c(BE0_bef,BE0_bey)
TE0=c(TE0_bef,TE0_bey)
}
# TC0 = runif(n0, tau0,tau)
TC0 = rexp(n=n0, rate = 1)
time0= ifelse(TE0<=TC0, TE0,TC0)
status0 = ifelse(TE0<=TC0 & TE0<tau,1,0)
treat0 = rep(0,n0)
sim0 <- data.frame(BE0,time0,status0,treat0)
# TWO-SAMPLE DATA
######################################
# data = data.frame(time=c(sim1$time1,sim0$time0), status=c(sim1$status1,sim0$status0),treat=c(sim1$treat1,sim0$treat0))
data = data.frame(binary=c(sim1$BE1, sim0$BE0), time=c(sim1$time1,sim0$time0), status=c(sim1$status1,sim0$status0),treat=c(sim1$treat1,sim0$treat0))
sum(subset(data, data$treat==1)$binary)/n1
sum(subset(data, data$treat==0)$binary)/n0
######################################
# PLOTS KAPLAN-MEIER ESTIMATORS
######################################
windows()
fit.rms <- npsurv(Surv(time=time,event=status)~treat, data)
survplot(fit  = fit.rms,
conf = c("none","bands","bars")[2],
xlab = "", ylab = "Survival",
# xlim=c(0,60),
# label.curves = TRUE,                     # label curves directly
label.curves = list(keys = "lines"),  # legend instead of direct label
levels.only  = FALSE,                    # show only levels, no label
abbrev.label = FALSE,                    # if label used, abbreviate
## fun = function(x) {1 - x},            # Cumulative probability plot
loglog   = FALSE,                        # log(-log Survival) plot
logt     = FALSE,                        # log time
time.inc = 4,                          # time increment
dots     = TRUE,                         # dot grid
n.risk   = TRUE,                          # show number at risk
cex.n.risk=0.8,
col=c("red","blue"),lwd=2,lty=1
)
install.packages("survminer")
